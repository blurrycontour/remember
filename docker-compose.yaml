services:
  backend:
    restart: always
    # container_name: backend
    image: ${DOCKER_IMAGE_PREFIX}:backend-latest
    build:
      context: '.'
      dockerfile: backend/Dockerfile
      network: host
    # ports:
    #   - 5000:5000
    networks:
      - remember-network
    volumes:
      - ./data:/data
      - ~/.aws:/root/.aws
      - ~/.gcp:/root/.gcp
    env_file:
      - ./backend/.env
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  frontend:
    restart: always
    # container_name: frontend
    image: ${DOCKER_IMAGE_PREFIX}:frontend-latest
    build:
      context: '.'
      dockerfile: frontend/Dockerfile
      network: host
    # ports:
    #   - 3000:3000
    networks:
      - remember-network
    env_file:
      - ./frontend/.env
    extra_hosts:
      - 'host.docker.internal:host-gateway'


  nginx:
    restart: always
    image: nginx:alpine
    # container_name: nginx
    volumes:
      - ./nginx/default.conf:/tmp/nginx/nginx.conf
    command:
      - sh
      - -c
      - |
        envsubst '' < /tmp/nginx/nginx.conf > /etc/nginx/nginx.conf
        cat /etc/nginx/nginx.conf
        nginx -g 'daemon off;'
    ports:
      - ${NGINX_PORT}:80
    env_file:
      - ./.env
    networks:
      - remember-network
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  ngrok:
    restart: always
    image: ngrok/ngrok
    # container_name: ngrok
    ports:
      - 4040:4040
    command:
      - "start"
      - "nginx"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ./ngrok/ngrok.yaml:/etc/ngrok.yml
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    networks:
      remember-network:
        ipv4_address: ${NGROK_DOCKER_IP}


networks:
  remember-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.1.0.0/16
          gateway: 10.1.0.1
